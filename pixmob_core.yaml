# PixMob ESPHome Integration
#
# How to use this file:
# 1. Add the remote_transmitter component to your ESPHome config:
#    remote_transmitter:
#      pin: GPIO4  # IR LED pin
#      carrier_duty_percent: 50%
#
# 2. Copy the globals section and paste it in your ESPHome config
# 3. Copy the select and button sections and paste them in your config
# 4. The select entities will appear in Home Assistant for choosing patterns
# 5. The send button will transmit the selected pattern with optional tail effect

# Required global component
globals:
  - id: ir_transmitter
    type: remote_transmitter::RemoteTransmitterComponent
    restore_value: no

# Pattern selection dropdown
select:
  - platform: template
    name: "PixMob Pattern"
    id: pixmob_pattern
    optimistic: true
    options:
      - "RED"
      - "RED_2"
      - "RED_3"
      - "RED_4"
      - "RED_5"
      - "GREEN"
      - "GREEN_2"
      - "GREEN_3"
      - "BLUE"
      - "BLUE_2"
      - "BLUE_3"
      - "LIGHT_BLUE"
      - "LIGHT_BLUE_2"
      - "YELLOW"
      - "YELLOW_2"
      - "YELLOW_3"
      - "ORANGE"
      - "ORANGE_2"
      - "WHITISH"
      - "WHITISH_2"

  - platform: template
    name: "PixMob Tail"
    id: pixmob_tail
    optimistic: true
    options:
      - "NONE"
      # Basic fade in/out
      - "FADE_1"  # Slow fade in
      - "FADE_2"  # Fade in and out
      - "FADE_3"  # Fade in and out
      - "FADE_4"  # Slow fade out
      - "FADE_5"  # Fade in and out
      - "FADE_6"  # Fade in and out
      # Sharp probabilistic effects
      - "SHARP_PROBABILISTIC_1"
      - "SHARP_PROBABILISTIC_2"
      - "SHARP_PROBABILISTIC_3"
      - "SHARP_PROBABILISTIC_4"
      # Fade probabilistic effects
      - "FADE_PROBABILISTIC_1"
      - "FADE_PROBABILISTIC_2"
      - "FADE_PROBABILISTIC_3"
      - "FADE_PROBABILISTIC_4"

# Send button
button:
  - platform: template
    name: "Send PixMob Pattern"
    on_press:
      then:
        - lambda: |-
            // Pattern definitions
            std::map<std::string, std::vector<int>> patterns = {
              {"RED", {1,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"RED_2", {1,1,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"RED_3", {1,1,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"RED_4", {1,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"RED_5", {1,1,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"GREEN", {1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"GREEN_2", {1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"GREEN_3", {1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"BLUE", {1,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1}},
              {"BLUE_2", {1,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1}},
              {"BLUE_3", {1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1}},
              {"LIGHT_BLUE", {1,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1}},
              {"LIGHT_BLUE_2", {1,0,1,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,1}},
              {"YELLOW", {1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"YELLOW_2", {1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"YELLOW_3", {1,0,1,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1}},
              {"ORANGE", {1,0,1,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,1}},
              {"ORANGE_2", {1,0,1,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"WHITISH", {1,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1}},
              {"WHITISH_2", {1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1}}
            };

            std::map<std::string, std::vector<int>> tails = {
              {"NONE", {}},
              // Basic fade in/out
              {"FADE_1", {0,0,0,1,0,1,1,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1}},  // Slow fade in
              {"FADE_2", {0,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1}},  // Fade in and out
              {"FADE_3", {0,0,0,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1}},  // Fade in and out
              {"FADE_4", {0,0,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,0,0,0,1}},  // Slow fade out
              {"FADE_5", {0,0,0,1,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},  // Fade in and out
              {"FADE_6", {0,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},  // Fade in and out
              // Sharp probabilistic effects
              {"SHARP_PROBABILISTIC_1", {0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1}},
              {"SHARP_PROBABILISTIC_2", {0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"SHARP_PROBABILISTIC_3", {0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1}},
              {"SHARP_PROBABILISTIC_4", {0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,1}},
              // Fade probabilistic effects
              {"FADE_PROBABILISTIC_1", {0,0,0,1,0,0,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1}},
              {"FADE_PROBABILISTIC_2", {0,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,1,1,0,0,0,0,1}},
              {"FADE_PROBABILISTIC_3", {0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1}},
              {"FADE_PROBABILISTIC_4", {0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,0,0,0,1}}
            };

            // Get selected pattern and tail
            auto pattern = patterns[id(pixmob_pattern).state];
            auto tail = tails[id(pixmob_tail).state];
            
            // Combine pattern and tail
            if (!tail.empty()) {
              pattern.insert(pattern.end(), tail.begin(), tail.end());
            }

            // Convert to run lengths
            std::vector<int> run_lengths;
            int current_count = 0;
            int current_bit = -1;

            for (int bit : pattern) {
                if (bit != current_bit) {
                    if (current_bit != -1) {
                        run_lengths.push_back(current_count);
                    }
                    current_count = 1;
                    current_bit = bit;
                } else {
                    current_count++;
                }
            }

            if (current_bit != -1) {
                run_lengths.push_back(current_count);
            }

            // Convert to timings (700Âµs units)
            std::vector<uint16_t> timings;
            bool is_mark = true;
            for (int length : run_lengths) {
                timings.push_back(length * 700);
                is_mark = !is_mark;
            }

            // Send IR pattern
            auto transmit = id(ir_transmitter).transmit();
            transmit.set_carrier_frequency(38000);
            transmit.space(0);
            
            for (size_t i = 0; i < timings.size(); i++) {
                if (i % 2 == 0) {
                    transmit.mark(timings[i]);
                } else {
                    transmit.space(timings[i]);
                }
            }
            
            transmit.send();
            delay(3);